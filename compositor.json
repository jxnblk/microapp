{
  "name": "jxnblk/microapp",
  "version": "0.1.3",
  "libraries": {
    "xv": "^1.0.27"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Default",
    "fontFamily": "-apple-system, BlinkMacSystemFont, sans-serif",
    "fontWeight": 400,
    "bold": 600,
    "lineHeight": 1.5,
    "typeScale": [
      72,
      48,
      24,
      20,
      16,
      14,
      12
    ],
    "heading": {
      "fontFamily": null,
      "fontStyle": null,
      "fontWeight": 600,
      "lineHeight": 1.25,
      "textTransform": null,
      "letterSpacing": null,
      "h0": {},
      "h1": {},
      "h2": {},
      "h3": {},
      "h4": {},
      "h5": {},
      "h6": {}
    },
    "alternativeText": {},
    "space": [
      0,
      8,
      16,
      32,
      48,
      64,
      96
    ],
    "layout": {
      "maxWidth": 1024,
      "centered": false
    },
    "colors": {
      "text": "#111",
      "background": "#fff",
      "inverted": "#fff",
      "primary": "#08e",
      "secondary": "#0e8",
      "highlight": "#e08",
      "border": "#ddd",
      "muted": "#eee"
    },
    "border": {
      "width": 1,
      "radius": 2
    },
    "link": {},
    "button": {
      "hover": {
        "boxShadow": "inset 0 0 0 999px rgba(0, 0, 0, .125)"
      }
    },
    "input": {},
    "body": {
      "margin": 0
    }
  },
  "content": [
    {
      "component": "nav/AbsoluteNav",
      "links": [
        {
          "href": "https://github.com/jxnblk/microapp",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/microapp",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header/BannerHeader",
      "heading": "microapp",
      "subhead": "",
      "links": [
        {
          "text": "Tweet",
          "href": "https://twitter.com/intent/tweet?text=microapp%253A%2520null&url="
        }
      ],
      "text": "v1.0.0"
    },
    {
      "component": "article/BasicArticle",
      "text": "\n<p>Minimal functional application creator.\nA demonstration of basic functional UI principles.</p>\n<pre><code class=\"lang-sh\">npm i microapp\n</code></pre>\n<h2 id=\"usage-\">Usage:</h2>\n<pre><code class=\"lang-js\">import createApp, { h } from &apos;microapp&apos;\n\n// Redux-like reducer for application state\nconst reducer = (state = {\n  count: 0\n}, action) =&gt; {\n  switch (action.type) {\n    case: &apos;dec&apos;:\n      const count = state.count - 1\n      return { ...state, count }\n    case: &apos;inc&apos;:\n      const count = state.count + 1\n      return { ...state, count }\n    default:\n      return state\n  }\n}\n\n// Functional UI component\nconst App = ({ state, dispatch }) =&gt; {\n  return h`\n    &lt;div&gt;\n      &lt;h1&gt;Count: ${state.count}&lt;/h1&gt;\n      &lt;button\n        onclick=${e =&gt; dispatch({ type: &apos;dec&apos; })}&gt;\n        - Decrement\n      &lt;/button&gt;\n      &lt;button\n        onclick=${e =&gt; dispatch({ type: &apos;inc&apos; })}&gt;\n        + Increment\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `\n}\n\nconst app = createApp(reducer, App)\n\napp.mount(document.body)\n</code></pre>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Redux-like store with a single reducer</li>\n<li>ES2015 template literal functions based on bel</li>\n<li>DOM update using morphdom and yo.update</li>\n<li>cxs className helper for functional styles</li>\n</ul>\n",
      "html": "\n<p>Minimal functional application creator.\nA demonstration of basic functional UI principles.</p>\n<pre><code class=\"lang-sh\">npm i microapp\n</code></pre>\n<h2 id=\"usage-\">Usage:</h2>\n<pre><code class=\"lang-js\">import createApp, { h } from &apos;microapp&apos;\n\n// Redux-like reducer for application state\nconst reducer = (state = {\n  count: 0\n}, action) =&gt; {\n  switch (action.type) {\n    case: &apos;dec&apos;:\n      const count = state.count - 1\n      return { ...state, count }\n    case: &apos;inc&apos;:\n      const count = state.count + 1\n      return { ...state, count }\n    default:\n      return state\n  }\n}\n\n// Functional UI component\nconst App = ({ state, dispatch }) =&gt; {\n  return h`\n    &lt;div&gt;\n      &lt;h1&gt;Count: ${state.count}&lt;/h1&gt;\n      &lt;button\n        onclick=${e =&gt; dispatch({ type: &apos;dec&apos; })}&gt;\n        - Decrement\n      &lt;/button&gt;\n      &lt;button\n        onclick=${e =&gt; dispatch({ type: &apos;inc&apos; })}&gt;\n        + Increment\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `\n}\n\nconst app = createApp(reducer, App)\n\napp.mount(document.body)\n</code></pre>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Redux-like store with a single reducer</li>\n<li>ES2015 template literal functions based on bel</li>\n<li>DOM update using morphdom and yo.update</li>\n<li>cxs className helper for functional styles</li>\n</ul>\n"
    },
    {
      "component": "footer/BasicFooter",
      "links": [
        {
          "href": "https://github.com/jxnblk/microapp",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/jxnblk",
          "text": "jxnblk"
        }
      ]
    }
  ]
}